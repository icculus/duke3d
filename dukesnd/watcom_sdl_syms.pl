#!/usr/bin/perl -w
#
# Figures out what SDL symbols need to get flagged as __cdecl to Watcom
#  compilers, so that SDL can be correctly linked with Watcom tools.
#
# Please inspect the output! If it looks wrong, it probably is.
#
#   Written by Ryan C. Gordon. (icculus@linuxgames.com)

use strict;

my $lib = shift;
if (not defined $lib) {
    die("USAGE: $0 <name of library>\n\n");
}

open(NM, "nm $lib |") ||
    die("Couldn't exec nm: $!\n");

print <<__EOF__;

/*
 *  This is a Watcom C support header. It was autogenerated by a perl script
 *  (watcom_sdl_syms.pl). The perl was written by Ryan C. Gordon
 *  (icculus\@linuxgames.com), who loves to put his name all over the place. :)
 *
 *         YOU SHOULD NOT INCLUDE THIS DIRECTLY. Just include "SDL.h",
 *                which will handle all this internally.
 */

#ifndef _SDL_syms_for_watcom_h_
#define _SDL_syms_for_watcom_h_

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __WATCOMC__
__EOF__

while (<NM>) {
    chomp;

    /........ (.) ([^\/]+)/;

    my $symtype = $1;
    my $symname = $2;

    if ($symtype eq "U") {
         if (($symname =~ /^SDL_/) or ($symname =~ /^Mix_/)) {
             print("#pragma aux (__cdecl) $symname;\n");
         }
    }
}

close(NM);

print <<__EOF__;

/*
 * Don't forget to compile your code with wcc386.exe's -ei option, so that
 *  enums in Watcom and SDL are the same size, and remember that any SDL
 *  callbacks (for sound or event filtering, etc) in your Watcom C-based code
 *  must be labelled as __cdecl. An example:
 *
 *   int my_sdl_event_filter_function(const SDL_Event *event);
 *   #ifdef __WATCOMC__
 *   #pragma aux (__cdecl) my_sdl_event_filter_function;
 *   #endif
 *
 *     Have fun, and good luck!   --ryan.  (icculus\@linuxgames.com)
 */

#endif /* __WATCOMC__ */
#endif /* _SDL_syms_for_watcom_h_ */

__EOF__


# end of watcom_sdl_syms.pl ...

